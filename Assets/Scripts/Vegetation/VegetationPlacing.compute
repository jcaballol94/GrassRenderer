#include "noise.hlsl"

#pragma kernel PlaceVegetation

AppendStructuredBuffer<float4> _Positions;

float3 _TerrainSize;
float3 _TerrainPosition;
float2 _HeightRange;
uint2 _Resolution;

float4 _Frustum[6];

float2 GetUV (uint3 id)
{
    return (id.xy + rand_2_10(id.xy)) / _Resolution;
}

float GetHeight(uint3 id)
{
    return lerp(_HeightRange.x, _HeightRange.y, rand_1_05(id.xy));
}

void SetPosition(uint3 id, float3 position, float height)
{
    // Only add instances that are in bounds
    if (id.x < _Resolution.x && id.y < _Resolution.y)
    {
        _Positions.Append(float4(position, height));
    }
}

bool IsVisible (float3 position, float radius)
{
    bool res = true;
    // Test all planes
    for (int i = 0; i < 6; ++i)
    {
        if (dot(_Frustum[i].xyz, position) + _Frustum[i].w < -radius)
            res = false;
    }

    return res;
}

[numthreads(32,32,1)]
void PlaceVegetation (uint3 id : SV_DispatchThreadID)
{
    float2 uv = GetUV(id);
    uv *= _TerrainSize.xz;

    float3 position = _TerrainPosition;
    position.xz += uv;
    float height = GetHeight(id);

    if (IsVisible(position, 1))
        SetPosition(id, position, height);
}