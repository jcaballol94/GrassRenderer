#include "noise.hlsl"

#pragma kernel PlaceVegetation

struct instance
{
    float4 positions;
    float4 normals;
};

AppendStructuredBuffer<instance> _Positions;

float3 _TerrainSize;
float3 _TerrainPosition;
float2 _HeightRange;
uint2 _Resolution;
float _TerrainHeight;
float4 _TerrainLayer;

Texture2D<float> _HeightMap;
Texture2D<float4> _SplatMap;
SamplerState linearClampSampler;

float4 _Frustum[6];

float2 GetUV (uint3 id)
{
    return (id.xy + rand_2_10(id.xy)) / _Resolution;
}

float GetHeight(uint3 id)
{
    return lerp(_HeightRange.x, _HeightRange.y, rand_1_05(id.xy));
}

void SetPosition(uint3 id, float3 position, float3 normal, float height)
{
    // Only add instances that are in bounds
    if (id.x < _Resolution.x && id.y < _Resolution.y)
    {
        instance ins;
        ins.positions = float4(position, height);
        ins.normals = float4(normal, 0);
        _Positions.Append(ins);
    }
}

bool IsVisible (float3 position, float radius)
{
    bool res = true;
    // Test all planes
    for (int i = 0; i < 6; ++i)
    {
        if (dot(_Frustum[i].xyz, position) + _Frustum[i].w < -radius)
            res = false;
    }

    return res;
}

[numthreads(32,32,1)]
void PlaceVegetation (uint3 id : SV_DispatchThreadID)
{
    float2 uv = GetUV(id);
    
    float3 position = _TerrainPosition;
    position.xz += uv * _TerrainSize.xz;

    position.y += _HeightMap.SampleLevel(linearClampSampler, uv, 0) * _TerrainHeight * 2;

    float2 change = 1 / _TerrainSize.xz;
    float left = _HeightMap.SampleLevel(linearClampSampler, uv - float2(change.x, 0), 0) * _TerrainHeight * 2;
    float right = _HeightMap.SampleLevel(linearClampSampler, uv + float2(change.x, 0), 0) * _TerrainHeight * 2;
    float up = _HeightMap.SampleLevel(linearClampSampler, uv + float2(0, change.y), 0) * _TerrainHeight * 2;
    float down = _HeightMap.SampleLevel(linearClampSampler, uv - float2(0, change.y), 0) * _TerrainHeight * 2;

    float3 normal = normalize(float3(2 * (left - right), 4, 2*(down - up)));

    float height = GetHeight(id);

    float4 splat = _SplatMap.SampleLevel(linearClampSampler, uv, 0) * _TerrainLayer;
    float weight = splat.x + splat.y + splat.z + splat.w;

    if (weight > 0.5 && IsVisible(position, 1))
        SetPosition(id, position, normal, height);
}